---
title: "Relatório diário"
subtitle: "Expectativas de mercado e curvas de juros"
format: html
author: DIC-RF
lang: pt
title-block-banner: "#0f0c0fff"
date: last-modified
execute: 
  echo: false
  warning: false
---


```{python}
#| fig-align: center
#| echo: false
#| warning: false

import pandas as pd
import ipeadatapy as ipea
from pyield import ntnb, ntnf, ltn
from pyield import bday
from pyield import bc
from pyield import anbima
from pyield import Interpolator
import numpy as np
import pyield as yd
from pandas.tseries.offsets import BDay
from pyield.anbima import intraday_ettj, last_ettj
import datetime
import plotnine as p9
from mizani.formatters import number_format

```

```{python}
#| fig-align: center
#| warning: false
#| echo: false

# Importação de dados Expectativas Focus

dados_focus = pd.read_csv(filepath_or_buffer="https://olinda.bcb.gov.br/olinda/servico/Expectativas/versao/v1/odata/ExpectativasMercadoAnuais?$filter=Indicador%20eq%20'PIB%20Total'%20or%20Indicador%20eq%20'IPCA'%20or%20Indicador%20eq%20'C%C3%A2mbio'%20or%20Indicador%20eq%20'Selic'%20and%20baseCalculo%20eq%200&$format=text/csv",
decimal = ",")

# Tratamento de dados

dados_focus_base_tratada = (
    dados_focus
    .filter(
        items = ["Indicador", "Data", "DataReferencia", "Mediana"]
    )
    .assign(
        Data = lambda x: pd.to_datetime(x["Data"], format = "%Y-%m-%d").dt.strftime("%Y%m")
    )
    .groupby(by = ["Indicador", "Data", "DataReferencia"], as_index=False)["Mediana"].mean()
    .assign(
        DataReferencia = lambda x: x["DataReferencia"].astype(object)
    )
    .assign(
        Data = lambda x: pd.to_datetime(x.Data, format="%Y%m") 
    )
)

# Immportação de dados curvas de juros ANBIMA

# Datas
hoje = datetime.date.today()
ontem = hoje - 1 * BDay()
semana_anterior = hoje - 5 * BDay()
semestre = (hoje - pd.Timedelta(days = 180)) + BDay(0)

# Importando DI's
DI_ontem = yd.futures(contract_code="DI1", date=ontem)
DI_semana_anterior = yd.futures(contract_code="DI1", date = semana_anterior)
DI_semestre = yd.futures(contract_code="DI1", date = semestre)

# Importando NTN-B's
ntnb_ontem = ntnb.data(ontem)
ntnb_semana_anterior = ntnb.data(semana_anterior)
ntnb_semestre = ntnb.data(semestre)

# Importando LTN's
ltn_ontem = ltn.data(ontem)
ltn_semana_anterior = ltn.data(semana_anterior)
ltn_semestre = ltn.data(semestre)

# Tratamento DI
def tratar(base): 
    tabela = (
        base
        .filter(
            items = ["TradeDate", "ExpirationDate", "TickerSymbol", "ForwardRate", "BDaysToExp"],
            axis = 1
        )
        .rename(
            columns = {
            "TradeDate": "data_negociacao",
            "ExpirationDate": "data",
            "TickerSymbol": "ticker",
            "ForwardRate": "taxa",
            "BDaysToExp": "dias"
        }

        )
        .assign(taxa = lambda x: x["taxa"] * 100)
        .assign(taxa = lambda x: x.taxa.round(2))
    )

    return tabela

DI_ontem = tratar(DI_ontem)
DI_semana_anterior = tratar(DI_semana_anterior)
DI_semestre = tratar(DI_semestre)

# Tratamento NTNB e LTN 

def tratatpf(base): 
    base_titulos = (
    base
    .filter(
        items = ["ReferenceDate", "MaturityDate", "BDToMat", "Duration", "IndicativeRate", "DIRate"],
        axis = 1
    )
    .rename(
        columns = {
            "ReferenceDate": "data_negociacao",
            "MaturityDate": "vencimento",
            "BDToMat": "dias",
            "Duration": "duration",
            "IndicativeRate": "taxa",
            "DIRate": "DI"
        })
    .assign(
        taxa = lambda x: x.taxa * 100,
        DI = lambda x: x.DI * 100
    )
    .assign(
        taxa = lambda x: x.taxa.round(2),
        DI = lambda x: x.DI.round(2),
        inflacao_implicita = lambda x: x.DI - x.taxa,
        duration = lambda x: x.duration.round(2)
    )
)
    return base_titulos

ntnb_ontem = tratatpf(ntnb_ontem)
ntnb_semana_anterior = tratatpf(ntnb_semana_anterior)
ntnb_semestre = tratatpf(ntnb_semestre)

ltn_ontem = tratatpf(ltn_ontem)
ltn_semana_anterior  = tratatpf(ltn_semana_anterior)
ltn_ontem = tratatpf(ltn_semestre)


```



# *Objetivo  do relatório*

O presente documento tem como fim manter acompanhamento rotineiro do andamento das expectativas de mercado, bem como das curvas de juros, elementos imprescindíveis para a tomada de decisões no âmbito da alocação de capital.

## *Relatório Focus*

### *PIB*

```{python}
#| fig-align: center
#| echo: false
#| warning: false   

PIB_focus = (
        dados_focus_base_tratada
        .query("Indicador == 'PIB Total'")
        .replace(
            to_replace = "PIB Total",
            value = "PIB"
        )
        .query("Data >= '2022-01-01'")
        .query("DataReferencia > 2024")
        .assign(Mediana = lambda x: x.Mediana.round(2))
    )

(
    p9.ggplot(PIB_focus) + 
    p9.aes(x = 'Data', y = 'Mediana', color = "DataReferencia") + 
    p9.geom_line() + 
    p9.labs(
        x = "",
        y = "",
        title = "Mediana Focus - PIB",
        caption = "Elaborado por DIC-RF"
    ) + 
    p9.theme(
        plot_title= p9.element_text(weight='bold'),
        legend_title=p9.element_blank(),
        legend_text=p9.element_text(weight='bold'),
        plot_caption=p9.element_text(weight='bold')
    ) + 
    p9.scale_x_date(date_labels="%Y-%m")
)

```


### *Selic*


```{python}
#| fig-align: center
#| echo: false
#| warning: false   

Selic = (
        dados_focus_base_tratada
        .query("Indicador == 'Selic'")
        .query("Data >= '2022-01-01'")
        .query("DataReferencia > 2024")
        .assign(Mediana = lambda x: x.Mediana.round(2))
    )

(
    p9.ggplot(Selic) + 
    p9.aes(x = 'Data', y = 'Mediana', color = "DataReferencia") + 
    p9.geom_line() + 
    p9.labs(
        x = "",
        y = "",
        title = "Mediana Focus - Selic",
        caption = "Elaborado por DIC-RF"
    ) + 
    p9.theme(
        plot_title= p9.element_text(weight='bold'),
        legend_title=p9.element_blank(),
        legend_text=p9.element_text(weight='bold'),
        plot_caption=p9.element_text(weight='bold')
    ) +
    p9.scale_x_date(date_labels="%Y-%m")
)
```


### *Câmbio*


```{python}
#| fig-align: center
#| echo: false
#| warning: false   

cambio = (
        dados_focus_base_tratada
        .query("Indicador == 'Câmbio'")
        .query("Data >= '2022-01-01'")
        .query("DataReferencia > 2024")
        .assign(Mediana = lambda x: x.Mediana.round(2))
    )

(
    p9.ggplot(cambio) + 
    p9.aes(x = 'Data', y = 'Mediana', color = "DataReferencia") + 
    p9.geom_line() + 
    p9.labs(
        x = "",
        y = "",
        title = "Mediana Focus - Câmbio",
        caption = "Elaborado por DIC-RF"
    ) + 
    p9.theme(
        plot_title= p9.element_text(weight='bold'),
        legend_title=p9.element_blank(),
        legend_text=p9.element_text(weight='bold'),
        plot_caption=p9.element_text(weight='bold')
    ) +
    p9.scale_x_date(date_labels="%Y-%m")
)




```



### *IPCA*


```{python}
#| fig-align: center
#| echo: false
#| warning: false   

ipca = (
        dados_focus_base_tratada
        .query("Indicador == 'IPCA'")
        .query("Data >= '2022-01-01'")
        .query("DataReferencia > 2024")
        .assign(Mediana = lambda x: x.Mediana.round(2))
    )

(
    p9.ggplot(ipca) + 
    p9.aes(x = 'Data', y = 'Mediana', color = "DataReferencia") + 
    p9.geom_line() + 
    p9.labs(
        x = "",
        y = "",
        title = "Mediana Focus - IPCA",
        caption = "Elaborado por DIC-RF"
    ) + 
    p9.theme(
        plot_title= p9.element_text(weight='bold'),
        legend_title=p9.element_blank(),
        legend_text=p9.element_text(weight='bold'),
        plot_caption=p9.element_text(weight='bold')
    ) +
    p9.scale_x_date(date_labels="%Y-%m") + 
    p9.scale_y_continuous(labels = number_format(accuracy=0.01))
)
```


## *Variáveis de mercado*

### *Juro real Ex-Ante*


```{python}
#| fig-align: center
#| echo: false
#| warning: false

# Importando DI futuro
DI_futuro_360 = ipea.timeseries(series = "BMF12_SWAPDI36012")

DI_futuro_360_tratado = (
    DI_futuro_360
    .reset_index()
    .filter(
        items=["DATE", "VALUE ((% a.a.))"]
    )
    .rename(
        columns = {
            "DATE": "data", "VALUE ((% a.a.))": "taxa"
        }
    )
    .query(
        "data > '2010-01-01'"
    )

)

# Inflação esperada

inflacao_12m = pd.read_csv("https://olinda.bcb.gov.br/olinda/servico/Expectativas/versao/v1/odata/ExpectativasMercadoInflacao12Meses?$filter=Indicador%20eq%20'IPCA'%20and%20baseCalculo%20eq%200%20and%20Suavizada%20eq%20'S'&$format=text/csv",
decimal = ",")

inflacao_12m_tratado = (
    inflacao_12m
    .filter(
        items = ["Data", "Mediana"],
        axis = 1
    )
    .rename(
        {
            "Data": "data",
            "Mediana": "ipca"
        },
        axis = 1
    )
    .query("data > '2010-01-01'")
    .assign(
        anomes = lambda x: pd.to_datetime(x["data"]).dt.strftime("%Y%m")
    )
    .groupby(by = ["anomes"], as_index=False)["ipca"]
    .mean()
    .assign(
        data = lambda x: pd.to_datetime(x["anomes"], format = "%Y%m")
    )
    .filter(['data', 'ipca'], axis = 1)
)


# juntando tabelas
tabela_juro_real = (
    DI_futuro_360_tratado
    .merge(
        right = inflacao_12m_tratado,
        how = 'left',
        on = 'data'
    )
    .assign(
        juro_real = lambda x: (((1 + x["taxa"]/100) / (1 + x["ipca"]/100)) - 1) * 100
    )
    .assign(
        juro_real = lambda x: x["juro_real"].round(2)
    )
)

# Gráfico 

last_point_jr = tabela_juro_real.query("data == data.max()")

grafico_juro_real_ex_ante = (
    p9.ggplot(tabela_juro_real) + 
    p9.aes(x = "data", y = "juro_real") + 
    p9.geom_line(color = "orange") + 
    p9.labs(
        x = "",
        y = "",
        title = "Juro Real ex-ante",
        caption = "Elaborado por DIC-RF"
    ) + 
    p9.theme(
        plot_title=p9.element_text(weight = "bold"),
        plot_caption=p9.element_text(weight = "bold")
    ) + 
    p9.scale_x_date(date_labels="%Y-%m") + 
    p9.geom_label(
        data = last_point_jr,
        mapping = p9.aes(label = "juro_real"),
        fill = "#ff8100",
        color = "white",
        ha = "left",
        va = "center",
        nudge_x = 3,
        size = 7,
        fontweight = "bold"
    )
)

grafico_juro_real_ex_ante


```


### *DI Futuro*


```{python}
#| fig-align: center
#| echo: false
#| warning: false

# Tratamento

tabela_DI = pd.concat(
    [DI_ontem, DI_semana_anterior, DI_semestre]
)


tabela_DI = (
    tabela_DI
    .sort_values(by = ["data_negociacao", "data"])
    .assign(
        data_negociacao = lambda x: x["data_negociacao"].astype(str)
    )
)

# Gráfico

grafico_DI_futuro = (
    p9.ggplot(tabela_DI) + 
    p9.aes(x = "data", y = "taxa", color = "data_negociacao") + 
    p9.geom_line() + 
    p9.labs(
        x = "",
        y = "",
        title = "DI Futuro",
        caption = "Elaborado por DIC-RF"
    ) + 
    p9.theme(
        plot_title=p9.element_text(weight="bold"),
        plot_caption=p9.element_text(weight="bold"),
        legend_title=p9.element_blank(),
        legend_position='top'
    ) + 
    p9.scale_x_date(date_labels = 
        "%Y-%m"
    ) + 
    p9.scale_color_manual(
        values = ["red", "blue", "orange"]
    )
) 

grafico_DI_futuro



```



